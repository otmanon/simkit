from types import NoneType
import igl
import scipy as sp
import numpy as np

from .arap_hessian import arap_hessian_d2F

from ..deformation_jacobian import deformation_jacobian
from ..rotation_gradient import rotation_gradient_F
from ..volume import volume

from ..mat2py import _4x4matrix_2D_ordering_, _9x9matrix_3D_ordering_

def fcr_hessian_d2F(F, mu=1, lam=1, vol=1):

    dim = F.shape[-1]
    mu = mu.reshape(-1, 1)
    vol = vol.reshape(-1, 1)
    lam = lam.reshape(-1, 1)
    python = np.arange(9).reshape(3, 3)
    matlab = np.arange(dim*dim).reshape(dim, dim, order='F').flatten()
    A = np.arange(dim*dim*dim*dim).reshape(dim*dim, dim*dim)
    A = A[:, matlab]
    A = A[matlab, :]
    if dim == 2:
        # convert this to python code
        # F1_1 = F(1);
        # F1_2 = F(3);
        # F2_1 = F(2);
        # F2_2 = F(4);
        # mu = in2(1);
        # la = in2(2);
        # t2 = F1_1.*F2_2;
        # t3 = F1_2.*F2_1;
        # t4 = F1_1.*F1_2.*la;
        # t5 = F1_1.*F2_1.*la;
        # t8 = F1_2.*F2_2.*la;
        # t9 = F2_1.*F2_2.*la;
        # t6 = la.*t2;
        # t7 = la.*t3;
        # t10 = -t2;
        # t11 = -t4;
        # t12 = -t5;
        # t13 = -t8;
        # t14 = -t9;
        # t15 = t3+t10+1.0;
        # t16 = la.*t15;
        # t17 = -t16;
        # t18 = t7+t16;
        # t19 = t6+t17;
        # H = reshape([F2_2.^2.*la,t13,t14,t19,t13,F1_2.^2.*la,t18,t11,t14,t18,F2_1.^2.*la,t12,t19,t11,t12,F1_1.^2.*la],[4,4]);
        # H = H + 2 * arap_hessian_F_2D(F,in2);

        # Extract elements from F and in2
        F_00 = F[:, 0, 0].reshape(-1, 1)
        F_01 = F[:, 0, 1].reshape(-1, 1)
        F_10 = F[:, 1, 0].reshape(-1, 1)
        F_11 = F[:, 1, 1].reshape(-1, 1)

        # Compute intermediate terms
        t2 = F_00 * F_11
        t3 = F_01 * F_10
        t4 = F_00 * F_01 * lam
        t5 = F_00 * F_10 * lam
        t8 = F_01 * F_11 * lam
        t9 = F_10 * F_11 * lam
        t6 = lam * t2
        t7 = lam * t3
        t10 = -t2
        t11 = -t4
        t12 = -t5
        t13 = -t8
        t14 = -t9
        t15 = t3 + t10 + 1.0
        t16 = lam * t15
        t17 = -t16
        t18 = t7 + t16
        t19 = t6 + t17

        # Construct H matrix
        H_vol = np.hstack([
            F_11**2 * lam, t13,           t14,           t19,
            t13,          F_01**2 * lam, t18,           t11,
            t14,          t18,          F_10**2 * lam,  t12,
            t19,          t11,          t12,           F_00**2 * lam
        ])[:, _4x4matrix_2D_ordering_].reshape(-1, 4, 4)

       
    elif dim == 3:
        la = lam

        F1_1 = F[:, 0, 0].reshape(-1, 1)
        F2_1 = F[:, 1, 0].reshape(-1, 1)
        F3_1 = F[:, 2, 0].reshape(-1, 1)
        F1_2 = F[:, 0, 1].reshape(-1, 1)
        F2_2 = F[:, 1, 1].reshape(-1, 1)
        F3_2 = F[:, 2, 1].reshape(-1, 1)
        F1_3 = F[:, 0, 2].reshape(-1, 1)
        F2_3 = F[:, 1, 2].reshape(-1, 1)
        F3_3 = F[:, 2, 2].reshape(-1, 1)


        # copy the below commented code into python    
        # H(0,0) += la*pow(F2_2*F3_3-F2_3*F3_2,2.0);
        # H(0,1) += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_2*F3_3-F2_3*F3_2);
        # H(0,2) += la*(F1_2*F2_3-F1_3*F2_2)*(F2_2*F3_3-F2_3*F3_2);
        # H(0,3) += -la*(F2_1*F3_3-F2_3*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        # H(0,4) += la*(F1_1*F3_3-F1_3*F3_1)*(F2_2*F3_3-F2_3*F3_2)-F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(0,5) += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_2*F3_3-F2_3*F3_2)+F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(0,6) += la*(F2_1*F3_2-F2_2*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        # H(0,7) += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_2*F3_3-F2_3*F3_2)+F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(0,8) += la*(F1_1*F2_2-F1_2*F2_1)*(F2_2*F3_3-F2_3*F3_2)-F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        
        t0 = np.zeros((F.shape[0], 9))
        t0[:, [0]] += la*pow(F2_2*F3_3-F2_3*F3_2,2.0);
        t0[:, [1]] += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_2*F3_3-F2_3*F3_2);
        t0[:, [2]] += la*(F1_2*F2_3-F1_3*F2_2)*(F2_2*F3_3-F2_3*F3_2);
        t0[:, [3]] += -la*(F2_1*F3_3-F2_3*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        t0[:, [4]] += la*(F1_1*F3_3-F1_3*F3_1)*(F2_2*F3_3-F2_3*F3_2)-F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t0[:, [5]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_2*F3_3-F2_3*F3_2)+F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t0[:, [6]] += la*(F2_1*F3_2-F2_2*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        t0[:, [7]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_2*F3_3-F2_3*F3_2)+F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t0[:, [8]] += la*(F1_1*F2_2-F1_2*F2_1)*(F2_2*F3_3-F2_3*F3_2)-F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        
        # H(1,0) += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_2*F3_3-F2_3*F3_2);
        # H(1,1) += la*pow(F1_2*F3_3-F1_3*F3_2,2.0);
        # H(1,2) += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_2*F3_3-F1_3*F3_2);
        # H(1,3) += la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_3-F2_3*F3_1)+F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(1,4) += -la*(F1_1*F3_3-F1_3*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        # H(1,5) += la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F3_3-F1_3*F3_2)-F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(1,6) += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_2-F2_2*F3_1)-F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(1,7) += la*(F1_1*F3_2-F1_2*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        # H(1,8) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F3_3-F1_3*F3_2)+F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t1 = np.zeros((F.shape[0], 9))
        t1[:, [0]] += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_2*F3_3-F2_3*F3_2);
        t1[:, [1]] += la*pow(F1_2*F3_3-F1_3*F3_2,2.0);
        t1[:, [2]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_2*F3_3-F1_3*F3_2);
        t1[:, [3]] += la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_3-F2_3*F3_1)+F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t1[:, [4]] += -la*(F1_1*F3_3-F1_3*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        t1[:, [5]] += la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F3_3-F1_3*F3_2)-F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t1[:, [6]] += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_2-F2_2*F3_1)-F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t1[:, [7]] += la*(F1_1*F3_2-F1_2*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        t1[:, [8]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F3_3-F1_3*F3_2)+F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);

        
        # H(2,0) += la*(F1_2*F2_3-F1_3*F2_2)*(F2_2*F3_3-F2_3*F3_2);
        # H(2,1) += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_2*F3_3-F1_3*F3_2);
        # H(2,2) += la*pow(F1_2*F2_3-F1_3*F2_2,2.0);
        # H(2,3) += -la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_3-F2_3*F3_1)-F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(2,4) += la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_3-F1_3*F3_1)+F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(2,5) += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        # H(2,6) += la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_2-F2_2*F3_1)+F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(2,7) += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_2-F1_2*F3_1)-F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(2,8) += la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        t2 = np.zeros((F.shape[0], 9))
        t2[:, [0]] += la*(F1_2*F2_3-F1_3*F2_2)*(F2_2*F3_3-F2_3*F3_2);
        t2[:, [1]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_2*F3_3-F1_3*F3_2);
        t2[:, [2]] += la*pow(F1_2*F2_3-F1_3*F2_2,2.0);
        t2[:, [3]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_3-F2_3*F3_1)-F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t2[:, [4]] += la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_3-F1_3*F3_1)+F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t2[:, [5]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        t2[:, [6]] += la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_2-F2_2*F3_1)+F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t2[:, [7]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_2-F1_2*F3_1)-F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t2[:, [8]] += la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        
        
        # H(3,0) += -la*(F2_1*F3_3-F2_3*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        # H(3,1) += la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_3-F2_3*F3_1)+F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(3,2) += -la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_3-F2_3*F3_1)-F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(3,3) += la*pow(F2_1*F3_3-F2_3*F3_1,2.0);
        # H(3,4) += -la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(3,5) += la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(3,6) += -la*(F2_1*F3_2-F2_2*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(3,7) += la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_3-F2_3*F3_1)-F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(3,8) += -la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_3-F2_3*F3_1)+F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t3 = np.zeros((F.shape[0], 9))
        t3[:, [0]] += -la*(F2_1*F3_3-F2_3*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        t3[:, [1]] += la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_3-F2_3*F3_1)+F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t3[:, [2]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_3-F2_3*F3_1)-F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t3[:, [3]] += la*pow(F2_1*F3_3-F2_3*F3_1,2.0);
        t3[:, [4]] += -la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        t3[:, [5]] += la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_3-F2_3*F3_1);
        t3[:, [6]] += -la*(F2_1*F3_2-F2_2*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        t3[:, [7]] += la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_3-F2_3*F3_1)-F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t3[:, [8]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_3-F2_3*F3_1)+F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        
        
        # H(4,0) += la*(F1_1*F3_3-F1_3*F3_1)*(F2_2*F3_3-F2_3*F3_2)-F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(4,1) += -la*(F1_1*F3_3-F1_3*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        # H(4,2) += la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_3-F1_3*F3_1)+F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(4,3) += -la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(4,4) += la*pow(F1_1*F3_3-F1_3*F3_1,2.0);
        # H(4,5) += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_3-F1_3*F3_1);
        # H(4,6) += la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_2-F2_2*F3_1)+F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(4,7) += -la*(F1_1*F3_2-F1_2*F3_1)*(F1_1*F3_3-F1_3*F3_1);
        # H(4,8) += la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_3-F1_3*F3_1)-F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t4 = np.zeros((F.shape[0], 9))
        t4[:, [0]] += la*(F1_1*F3_3-F1_3*F3_1)*(F2_2*F3_3-F2_3*F3_2)-F3_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t4[:, [1]] += -la*(F1_1*F3_3-F1_3*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        t4[:, [2]] += la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_3-F1_3*F3_1)+F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t4[:, [3]] += -la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        t4[:, [4]] += la*pow(F1_1*F3_3-F1_3*F3_1,2.0);
        t4[:, [5]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_3-F1_3*F3_1);
        t4[:, [6]] += la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_2-F2_2*F3_1)+F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t4[:, [7]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F1_1*F3_3-F1_3*F3_1);
        t4[:, [8]] += la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_3-F1_3*F3_1)-F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
       
        
        # H(5,0) += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_2*F3_3-F2_3*F3_2)+F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(5,1) += la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F3_3-F1_3*F3_2)-F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(5,2) += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        # H(5,3) += la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(5,4) += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_3-F1_3*F3_1);
        # H(5,5) += la*pow(F1_1*F2_3-F1_3*F2_1,2.0);
        # H(5,6) += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_2-F2_2*F3_1)-F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(5,7) += la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_2-F1_2*F3_1)+F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(5,8) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F2_3-F1_3*F2_1);
        t5 = np.zeros((F.shape[0], 9))
        t5[:, [0]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_2*F3_3-F2_3*F3_2)+F2_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t5[:, [1]] += la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F3_3-F1_3*F3_2)-F1_3*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t5[:, [2]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        t5[:, [3]] += la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_3-F2_3*F3_1);
        t5[:, [4]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_3-F1_3*F3_1);
        t5[:, [5]] += la*pow(F1_1*F2_3-F1_3*F2_1,2.0);
        t5[:, [6]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_2-F2_2*F3_1)-F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t5[:, [7]] += la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_2-F1_2*F3_1)+F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t5[:, [8]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F2_3-F1_3*F2_1);



        # H(6,0) += la*(F2_1*F3_2-F2_2*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        # H(6,1) += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_2-F2_2*F3_1)-F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(6,2) += la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_2-F2_2*F3_1)+F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(6,3) += -la*(F2_1*F3_2-F2_2*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        # H(6,4) += la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_2-F2_2*F3_1)+F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(6,5) += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_2-F2_2*F3_1)-F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(6,6) += la*pow(F2_1*F3_2-F2_2*F3_1,2.0);
        # H(6,7) += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_2-F2_2*F3_1);
        # H(6,8) += la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_2-F2_2*F3_1);
        t6 = np.zeros((F.shape[0], 9))
        t6[:, [0]] += la*(F2_1*F3_2-F2_2*F3_1)*(F2_2*F3_3-F2_3*F3_2);
        t6[:, [1]] += -la*(F1_2*F3_3-F1_3*F3_2)*(F2_1*F3_2-F2_2*F3_1)-F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t6[:, [2]] += la*(F1_2*F2_3-F1_3*F2_2)*(F2_1*F3_2-F2_2*F3_1)+F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t6[:, [3]] += -la*(F2_1*F3_2-F2_2*F3_1)*(F2_1*F3_3-F2_3*F3_1);
        t6[:, [4]] += la*(F1_1*F3_3-F1_3*F3_1)*(F2_1*F3_2-F2_2*F3_1)+F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t6[:, [5]] += -la*(F1_1*F2_3-F1_3*F2_1)*(F2_1*F3_2-F2_2*F3_1)-F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t6[:, [6]] += la*pow(F2_1*F3_2-F2_2*F3_1,2.0);
        t6[:, [7]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_2-F2_2*F3_1);
        t6[:, [8]] += la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_2-F2_2*F3_1);
       
       
        # H(7,0) += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_2*F3_3-F2_3*F3_2)+F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(7,1) += la*(F1_1*F3_2-F1_2*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        # H(7,2) += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_2-F1_2*F3_1)-F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(7,3) += la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_3-F2_3*F3_1)-F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(7,4) += -la*(F1_1*F3_2-F1_2*F3_1)*(F1_1*F3_3-F1_3*F3_1);
        # H(7,5) += la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_2-F1_2*F3_1)+F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(7,6) += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_2-F2_2*F3_1);
        # H(7,7) += la*pow(F1_1*F3_2-F1_2*F3_1,2.0);
        # H(7,8) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_2-F1_2*F3_1);
        t7 = np.zeros((F.shape[0], 9))
        t7[:, [0]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_2*F3_3-F2_3*F3_2)+F3_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t7[:, [1]] += la*(F1_1*F3_2-F1_2*F3_1)*(F1_2*F3_3-F1_3*F3_2);
        t7[:, [2]] += -la*(F1_2*F2_3-F1_3*F2_2)*(F1_1*F3_2-F1_2*F3_1)-F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t7[:, [3]] += la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_3-F2_3*F3_1)-F3_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t7[:, [4]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F1_1*F3_3-F1_3*F3_1);
        t7[:, [5]] += la*(F1_1*F2_3-F1_3*F2_1)*(F1_1*F3_2-F1_2*F3_1)+F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t7[:, [6]] += -la*(F1_1*F3_2-F1_2*F3_1)*(F2_1*F3_2-F2_2*F3_1);
        t7[:, [7]] += la*pow(F1_1*F3_2-F1_2*F3_1,2.0);
        t7[:, [8]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_2-F1_2*F3_1);
        
        
        
        # H(8,0) += la*(F1_1*F2_2-F1_2*F2_1)*(F2_2*F3_3-F2_3*F3_2)-F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(8,1) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F3_3-F1_3*F3_2)+F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(8,2) += la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        # H(8,3) += -la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_3-F2_3*F3_1)+F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(8,4) += la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_3-F1_3*F3_1)-F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        # H(8,5) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F2_3-F1_3*F2_1);
        # H(8,6) += la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_2-F2_2*F3_1);
        # H(8,7) += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_2-F1_2*F3_1);
        # H(8,8) += la*pow(F1_1*F2_2-F1_2*F2_1,2.0);
        t8 = np.zeros((F.shape[0], 9))
        t8[:, [0]] += la*(F1_1*F2_2-F1_2*F2_1)*(F2_2*F3_3-F2_3*F3_2)-F2_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t8[:, [1]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F3_3-F1_3*F3_2)+F1_2*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t8[:, [2]] += la*(F1_1*F2_2-F1_2*F2_1)*(F1_2*F2_3-F1_3*F2_2);
        t8[:, [3]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_3-F2_3*F3_1)+F2_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t8[:, [4]] += la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_3-F1_3*F3_1)-F1_1*la*(-F1_1*F2_2*F3_3+F1_1*F2_3*F3_2+F1_2*F2_1*F3_3-F1_2*F2_3*F3_1-F1_3*F2_1*F3_2+F1_3*F2_2*F3_1+1.0);
        t8[:, [5]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F2_3-F1_3*F2_1);
        t8[:, [6]] += la*(F1_1*F2_2-F1_2*F2_1)*(F2_1*F3_2-F2_2*F3_1);
        t8[:, [7]] += -la*(F1_1*F2_2-F1_2*F2_1)*(F1_1*F3_2-F1_2*F3_1);
        t8[:, [8]] += la*pow(F1_1*F2_2-F1_2*F2_1,2.0);
        
        H_vol = np.hstack([ 
           t0, t1, t2, t3, t4, t5, t6, t7, t8, 
        ])[:, _9x9matrix_3D_ordering_].reshape(-1, 9, 9)

    H = H_vol * vol.reshape(-1, 1, 1) + 2 * arap_hessian_d2F(F, mu, vol)

    return H


